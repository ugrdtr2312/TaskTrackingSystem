// <auto-generated />
using System;
using DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(TaskTrackingSystemContext))]
    partial class TaskTrackingSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DAL.Entities.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Web project 1 description",
                            Name = "Web project 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Web project 2 description",
                            Name = "Web project 2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Web project 3 description",
                            Name = "Web project 3"
                        });
                });

            modelBuilder.Entity("DAL.Entities.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("TaskPriority")
                        .HasColumnType("int");

                    b.Property<int>("TaskStatus")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 9, 18, 51, 59, 921, DateTimeKind.Local).AddTicks(9176),
                            Description = "Task1 description",
                            Name = "Task1",
                            ProjectId = 1,
                            TaskPriority = 2,
                            TaskStatus = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 10, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2794),
                            Description = "Task2 description",
                            Name = "Task2",
                            ProjectId = 1,
                            TaskPriority = 1,
                            TaskStatus = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 7, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2823),
                            Description = "Task3 description",
                            Name = "Task3",
                            ProjectId = 1,
                            TaskPriority = 3,
                            TaskStatus = 3,
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 12, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2829),
                            Description = "Task4 description",
                            Name = "Task4",
                            ProjectId = 1,
                            TaskPriority = 2,
                            TaskStatus = 2,
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 8, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2832),
                            Description = "Task5 description",
                            Name = "Task5",
                            ProjectId = 1,
                            TaskPriority = 1,
                            TaskStatus = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 10, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2834),
                            Description = "Task6 description",
                            Name = "Task6",
                            ProjectId = 1,
                            TaskPriority = 3,
                            TaskStatus = 3,
                            UserId = 2
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 9, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2838),
                            Description = "Task7 description",
                            Name = "Task7",
                            ProjectId = 1,
                            TaskPriority = 2,
                            TaskStatus = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 11, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2841),
                            Description = "Task8 description",
                            Name = "Task8",
                            ProjectId = 1,
                            TaskPriority = 4,
                            TaskStatus = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 7, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2843),
                            Description = "Task9 description",
                            Name = "Task9",
                            ProjectId = 1,
                            TaskPriority = 4,
                            TaskStatus = 2,
                            UserId = 2
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 9, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2846),
                            Description = "Task10 description",
                            Name = "Task10",
                            ProjectId = 1,
                            TaskPriority = 1,
                            TaskStatus = 4,
                            UserId = 1
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 12, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2849),
                            Description = "Task11 description",
                            Name = "Task11",
                            ProjectId = 1,
                            TaskPriority = 2,
                            TaskStatus = 5,
                            UserId = 2
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deadline = new DateTime(2021, 6, 10, 18, 51, 59, 924, DateTimeKind.Local).AddTicks(2851),
                            Description = "Task12 description",
                            Name = "Task12",
                            ProjectId = 1,
                            TaskPriority = 3,
                            TaskStatus = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef57e080-2308-49e9-812c-e18fff3d7d3b",
                            Email = "vladimir231200@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Vladimir",
                            LockoutEnabled = false,
                            NormalizedEmail = "VLADIMIR231200@GMAIL.COM",
                            NormalizedUserName = "UGRDTR",
                            PasswordHash = "AQAAAAEAACcQAAAAEK9bSPDGdmY1L/+ZVXrVyn0+lCBUZFUxdzn6HhgW4U/SFBBe8KlgHXmNFdBiALStNQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9820291d-ab5c-42e5-8e8b-afd2f8293e1a",
                            Surname = "Shengeliya",
                            TwoFactorEnabled = false,
                            UserName = "ugrdtr"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8ad7d13-cd80-4028-befa-2652c93c961f",
                            Email = "ns18091@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nikita",
                            LockoutEnabled = false,
                            NormalizedEmail = "NS18091@GMAIL.COM",
                            NormalizedUserName = "MXXNR1SE",
                            PasswordHash = "AQAAAAEAACcQAAAAEHpyaRcV/QDVIMP62+rE+SFjcsx1Skk37Sl/hI4wYgOCfeMWeUjzVoQ0qJLClUXRwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2b405fd5-a5b7-4494-9747-226802529c6f",
                            Surname = "Sidorov",
                            TwoFactorEnabled = false,
                            UserName = "mxxnr1se"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "69cc48b7-5ac6-4d3a-b81f-bd86d354abc7",
                            Email = "kochka4real@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Danila",
                            LockoutEnabled = false,
                            NormalizedEmail = "KOCHKA4REAL@GMAIL.COM",
                            NormalizedUserName = "AOLAN13",
                            PasswordHash = "AQAAAAEAACcQAAAAEEO5WxgZBy/F9ITNjfw3yvX1l6EtOBvrTwY9B9sTjbGNh5FtNQZlv2GvIZG71ySk0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b12cada3-2555-4d65-bd07-50e946453dc8",
                            Surname = "Crazy",
                            TwoFactorEnabled = false,
                            UserName = "Aolan13"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "99d6d5ae-5f61-49ed-a5f6-ef8e2020aa07",
                            Email = "janglaide@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Alison",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANGLAIDE@GMAIL.COM",
                            NormalizedUserName = "JANGLAIDE",
                            PasswordHash = "AQAAAAEAACcQAAAAEA/UeK7N10FsE9jxcrFb7nqYNjDPex+L6zy/aL+ULmrw/zMk5gwPa86bWRNjddQ7ow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0c1f260e-f306-48b8-bc28-5751b89524f5",
                            Surname = "Proshchenko",
                            TwoFactorEnabled = false,
                            UserName = "janglaide"
                        });
                });

            modelBuilder.Entity("DAL.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "f2e86f69-1a84-40bd-baa7-0ae9ed1ce2de",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "8d141fa6-5309-4043-9368-1e40354bd84c",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "ab64df49-c7dc-41be-a25c-aa0d0084244e",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UsersProjects", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersProjects");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            UserId = 1
                        },
                        new
                        {
                            ProjectId = 1,
                            UserId = 2
                        },
                        new
                        {
                            ProjectId = 1,
                            UserId = 3
                        },
                        new
                        {
                            ProjectId = 2,
                            UserId = 1
                        },
                        new
                        {
                            ProjectId = 2,
                            UserId = 2
                        },
                        new
                        {
                            ProjectId = 2,
                            UserId = 3
                        },
                        new
                        {
                            ProjectId = 3,
                            UserId = 1
                        },
                        new
                        {
                            ProjectId = 3,
                            UserId = 2
                        },
                        new
                        {
                            ProjectId = 3,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("DAL.Entities.Task", b =>
                {
                    b.HasOne("DAL.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DAL.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("DAL.Entities.UserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersProjects", b =>
                {
                    b.HasOne("DAL.Entities.Project", null)
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.Project", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
